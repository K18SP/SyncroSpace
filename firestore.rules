rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isUser(userId) {
        return request.auth.uid == userId;
    }
    
    function isSignedIn() {
        return request.auth != null;
    }

    // Admins can read all user data and update roles.
    // Users can read public profiles and manage their own data.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow list: if isAdmin();
      allow create: if isUser(userId);
      allow update: if isUser(userId) || isAdmin();
      allow delete: if isUser(userId) || isAdmin();

      // Notifications are private to each user
      match /notifications/{notificationId} {
        allow read, write, delete: if isUser(userId);
      }
    }

    // Company profile is readable by all authenticated users, writable only by admins.
    match /companyProfile/main {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

xx  xx    // Spaces can be read by members and admins, but only created/deleted by admins.
    // Chat messages within a space are limited to members of that space.
    match /spaces/{spaceId} {
      allow read: if isAdmin() || get(/databases/$(database)/documents/spaces/$(spaceId)).data.members.hasAny([request.auth.uid]);
      allow create, delete: if isAdmin();
      allow update: if get(/databases/$(database)/documents/spaces/$(spaceId)).data.members.hasAny([request.auth.uid]);
      
       match /messages/{messageId} {
         allow read, write: if get(/databases/$(database)/documents/spaces/$(spaceId)).data.members.hasAny([request.auth.uid]);
      }
    }
    
    // Connect channels are readable by members, writable by the creator.
     match /connect_channels/{channelId} {
      allow read, update: if resource.data.members.hasAny([request.auth.uid]);
      allow create: if isSignedIn();
    }
    
    // Conversations are private between two users.
    match /conversations/{conversationId} {
        allow read, write: if request.auth.uid in conversationId.split('_');

        match /messages/{messageId} {
            allow read, write: if request.auth.uid in conversationId.split('_');
        }
    }

    // Tasks are readable and writable by any authenticated user.
    match /tasks/{taskId} {
      allow read, write, delete: if isSignedIn();
    }
    
    // Invites can be created by any authenticated user.
    match /invites/{inviteId} {
        allow create: if isSignedIn();
    }
    
    // The shared whiteboard is accessible to any authenticated user.
    match /whiteboard/shared {
      allow read, write: if request.auth != null;
    }
    
    // User-specific whiteboards
    match /whiteboard/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }

    // Replace the whole spaces block in firestore.rules with this
match /spaces/{spaceId} {
  allow read: if request.auth != null
              && request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.members;
  allow update: if request.auth != null
                && request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.members;
  allow create, delete: if isAdmin();

  match /messages/{messageId} {
    allow read, write: if request.auth != null
                       && request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.members;
  }
}

// Inside match /users/{userId}
match /notifications/{notificationId} {
  // Owner can read/update/delete their notifications
  allow read, update, delete: if isUser(userId);
  // Any signed-in user can create a notification for the owner
  allow create: if isSignedIn();
}
  }
}