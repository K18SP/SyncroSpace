rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Storage metadata is managed via Firebase Storage rules; ensure Firestore message docs are allowed above.
    
    function isUser(userId) {
        return request.auth.uid == userId;
    }
    
    function isSignedIn() {
        return request.auth != null;
    }
    
    // Allow all authenticated users to read/write for development
    // In production, you should implement proper security rules
    function isDevelopment() {
        return true; // Always true for development
    }

    // Admins can read all user data and update roles.
    // Users can read public profiles and manage their own data.
    match /users/{userId} {
      allow read, write: if isSignedIn() || isDevelopment();
      allow list: if isAdmin() || isDevelopment();

      // Notifications are private to each user
      match /notifications/{notificationId} {
        allow read, update, delete: if isUser(userId);
        // Any signed-in user can create a notification for the owner
        allow create: if isSignedIn();
      }
    }

    // Company profile is readable by all authenticated users, writable only by admins.
    match /companyProfile/main {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // Spaces access: members can list/read/update; only admins can create/delete.
    match /spaces/{spaceId} {
      allow read, list, write: if isSignedIn() || isDevelopment();
      allow create, delete: if isAdmin() || isDevelopment();
      
      match /messages/{messageId} {
        allow read, write: if isDevelopment() || (
          isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.members
        );
      }
    }
    
    // Connect channels are readable by members, writable by the creator.
     match /connect_channels/{channelId} {
      allow read, update: if resource.data.members.hasAny([request.auth.uid]);
      allow create: if isSignedIn();
    }
    
    // Conversations are private between two users.
    match /conversations/{conversationId} {
        allow read, write: if request.auth.uid in conversationId.split('_');

        match /messages/{messageId} {
            allow read, write: if request.auth.uid in conversationId.split('_');
        }
    }

    // Tasks are readable and writable by any authenticated user.
    match /tasks/{taskId} {
      allow read, write, delete: if isSignedIn();
    }
    
    // Invites: creators can create; invited users can read their own invites
    match /invites/{inviteId} {
      allow create: if isSignedIn();
      allow read, list: if isSignedIn() && resource.data.invitedEmail == request.auth.token.email;
    }
    
    // The shared whiteboard is accessible to any authenticated user.
    match /whiteboard/shared {
      allow read, write: if request.auth != null;
    }
    
    // User-specific whiteboards
    match /whiteboard/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }

    // Meetings: attendees can read, creators can update/delete, admins can manage any
    match /meetings/{meetingId} {
      // Anyone can read meetings if they're invited or if it's development
      allow read: if isSignedIn() || isDevelopment();
      
      // Creators can update their own meetings
      allow update: if isSignedIn() && resource.data.creatorId == request.auth.uid;
      
      // Admins can update any meeting
      allow update: if isAdmin();
      
      // Creators can delete their own meetings
      allow delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
      
      // Admins can delete any meeting
      allow delete: if isAdmin();
      
      // Anyone can create meetings in development, authenticated users in production
      allow create: if isSignedIn() || isDevelopment();
      
      // List permissions for development
      allow list: if isDevelopment();
    }

  }
}